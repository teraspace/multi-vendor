var placeSearch, autocomplete, map, autocomplete_map, marker, infowindow, infowindowContent, input, place;


var componentForm = {
    street_number: {name: 'short_name', html: ''},
    route: {name: 'long_name', html:''},
    locality: {name: 'long_name', html: 'order_bill_address_attributes_city'},
    administrative_area_level_1: {name: 'long_name', html: 'order_bill_address_attributes_state_id'},
    country:  {name: 'long_name', html: 'order_bill_address_attributes_country_id'},
    postal_code: {name: 'short_name', html: 'address_zipcode'}
  };
  function initMap() {

    map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: -33.8688, lng: 151.2195},
      zoom: 13
    });
    var _position
    if(typeof(parseFloat($("#order_bill_address_attributes_lon").val()))=="number" && typeof(parseFloat($("#order_bill_address_attributes_lat").val()))=="number"){
        _position = {lng: parseFloat($("#order_bill_address_attributes_lon").val()), lat: parseFloat($("#order_bill_address_attributes_lat").val())}
        map.setCenter(new google.maps.LatLng(_position.lat,_position.lng))
        var service = new google.maps.places.PlacesService(map);
        var request = {
            location: map.getCenter(),
            radius: '500',
            query: $("#order_bill_address_attributes_address1").val(),
            fields: ['address_component', 'geometry', 'icon', 'name'],
          };
         
        service.textSearch(request, function(results, status){
            if (status == google.maps.places.PlacesServiceStatus.OK){
                var placeid = results[0].place_id
             service.getDetails({placeId: placeid, fields: request.fields}, fillInAddress);
            
            }

        });
  
    }

    $('#map').css({"min-height": "100%;"})

  }  
function geolocate() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        var geolocation = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        var circle = new google.maps.Circle(
            {center: geolocation, radius: position.coords.accuracy});
        autocomplete.setBounds(circle.getBounds());
      });
    }
  }

  function initAutocomplete() {
    initMap() 
    // Create the autocomplete object, restricting the search predictions to
    // geographical location types.
    autocomplete = new google.maps.places.Autocomplete(
        document.getElementById('order_bill_address_attributes_address1'));

    // Avoid paying for data that you don't need by restricting the set of
    // place fields that are returned to just the address components.
    autocomplete.setFields(['address_component']);
  
    // When the user selects an address from the drop-down, populate the
    // address fields in the form.
    autocomplete.addListener('place_changed', fillInAddress);
    autocomplete.setFields(
        ['address_components', 'geometry', 'icon', 'name']);
    infowindow = new google.maps.InfoWindow();
    infowindowContent = document.getElementById('infowindow-content');
    infowindow.setContent(infowindowContent);
    marker = new google.maps.Marker({
      map: map,
      anchorPoint: new google.maps.Point(0, -29)
    });

    infowindow.close();
    marker.setVisible(false);



  }
  function fillInAddress(results, status) {
    // Get the place details from the autocomplete object.
    try {
        place = autocomplete.getPlace();
        if(place==undefined) throw 42;
    } catch(e){
        if (status == google.maps.places.PlacesServiceStatus.OK) {
         place = results
        } else {
            console.log(status)
        }
    }

    for (var component in componentForm) {
        try{
            document.getElementById(component.html).value = '';
            document.getElementById(component.html).disabled = false;
        }catch(e){
            //console.log("no encontrado en Spree", component.html)
        }
    }
  
    // Get each component of the address from the place details,
    // and then fill-in the corresponding field on the form.
    for (var i = 0; i < place.address_components.length; i++) {
      var addressType = place.address_components[i].types[0];
      if (componentForm[addressType]) {
        var val = place.address_components[i][componentForm[addressType].name];
        try {
                console.log(addressType)
            document.getElementById(componentForm[addressType].html).value = val;
            if(componentForm[addressType].html=='order_bill_address_attributes_state_id'){
                var _selected_department, _elm = null
                $("#order_bill_address_attributes_state_id option").filter(function() {
                    if (this.text.split(' ')[0] == val.split(' ')[0]){
                        _selected_department  = this
                        return true
                    }
                }).attr('selected', true);
                $("#order_bill_address_attributes_state_id").val(_selected_department.value)
              
           

            }
            if(componentForm[addressType].html=='order_bill_address_attributes_country_id'){
                var _selected_country, _elm = null
                $("#order_bill_address_attributes_country_id option").filter(function() {
                    if (this.text.split(' ')[0] == val.split(' ')[0]){
                        _selected_country  = this
                        return true
                    }
                }).attr('selected', true);  
                $("#order_bill_address_attributes_country_id").val(_selected_country.value)

            }              
        }catch(e){
            console.log(e)
        }
        
      }

    }


    if (!place.geometry) {
      // User entered the name of a Place that was not suggested and
      // pressed the Enter key, or the Place Details request failed.
      window.alert("No details available for input: '" + place.name + "'");
      return;
    }

    // If the place has a geometry, then present it on a map.
    if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17);  // Why 17? Because it looks good.
    }
    marker.setPosition(place.geometry.location);
    marker.setVisible(true);

    $('#order_bill_address_attributes_lon').val(place.geometry.location.lng)
    $('#order_bill_address_attributes_lat').val(place.geometry.location.lat)
    var address = '';
    if (place.address_components) {
      address = [
        (place.address_components[0] && place.address_components[0].short_name || ''),
        (place.address_components[1] && place.address_components[1].short_name || ''),
        (place.address_components[2] && place.address_components[2].short_name || '')
      ].join(' ');
    }

    infowindowContent.children['place-icon'].src = place.icon;
    infowindowContent.children['place-name'].textContent = place.name;
    infowindowContent.children['place-address'].textContent = address;
    infowindow.open(map, marker);
  }
(function() {

    if(window.location.pathname!='/checkout/address') return
    console.log(window.location)
    console.log('checkout address')
    $( "#order_bill_address_attributes_address1" ).parent().parent().after( "<div style='height: 250px !important; margin-bottom:25px;' id='map'>Test</div>" );
    $( "#map" ).parent().parent().after( '    <div id="infowindow-content"><img src="" width="16" height="16" id="place-icon"><span id="place-name"  class="title"></span><br><span id="place-address"></span></div>' );
    //$( "#saddress1" ).parent().after(' <div> <input type="hidden" name="lon" id="address_lon" /> <input type="hidden" name="lat"  id="address_lat" /> </div> ')

    $("#order_bill_address_attributes_lat").hide()
    $("#order_bill_address_attributes_lon").hide()
    setTimeout(function(){

        initAutocomplete()
    },100)
    //$("input[name='address[address"+_active+"]']").value('bla bla')
})();